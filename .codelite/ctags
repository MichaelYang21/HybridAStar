std	C:\Users\Henry\AppData\Roaming\codelite\tmp\codelite_templates.hpp	/^namespace std { template<typename _Tp> class shared_ptr {$/;"	namespace	line:1
shared_ptr	C:\Users\Henry\AppData\Roaming\codelite\tmp\codelite_templates.hpp	/^namespace std { template<typename _Tp> class shared_ptr { $/;"	class	line:1	namespace:std
operator ->	C:\Users\Henry\AppData\Roaming\codelite\tmp\codelite_templates.hpp	/^    _Tp* operator->();$/;"	prototype	line:2	class:std::shared_ptr	access:private	signature:()	returns:_Tp 
reset	C:\Users\Henry\AppData\Roaming\codelite\tmp\codelite_templates.hpp	/^    void reset( Y* ptr );$/;"	prototype	line:3	class:std::shared_ptr	access:private	signature:( Y* ptr )	returns:void 
reset	C:\Users\Henry\AppData\Roaming\codelite\tmp\codelite_templates.hpp	/^    void reset( Y* ptr, Deleter d );$/;"	prototype	line:4	class:std::shared_ptr	access:private	signature:( Y* ptr, Deleter d )	returns:void 
reset	C:\Users\Henry\AppData\Roaming\codelite\tmp\codelite_templates.hpp	/^    void reset( Y* ptr, Deleter d, Alloc alloc );$/;"	prototype	line:5	class:std::shared_ptr	access:private	signature:( Y* ptr, Deleter d, Alloc alloc )	returns:void 
get	C:\Users\Henry\AppData\Roaming\codelite\tmp\codelite_templates.hpp	/^    _T* get() const;$/;"	prototype	line:6	class:std::shared_ptr	access:private	signature:() const	returns:_T 
_USE_MATH_DEFINES	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.cpp	/^#define _USE_MATH_DEFINES$/;"	macro	line:1
HBF	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.cpp	/^HBF::HBF() {$/;"	function	line:15	class:HBF	signature:()	returns:HBF :: 
~HBF	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.cpp	/^HBF::~HBF() {}$/;"	function	line:19	class:HBF	signature:()	returns:HBF :: 
theta_to_stack_number	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.cpp	/^int HBF::theta_to_stack_number(double theta){$/;"	function	line:22	class:HBF	signature:(double theta)	returns:int HBF :: 
idx	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.cpp	/^int HBF::idx(double float_num) {$/;"	function	line:35	class:HBF	signature:(double float_num)	returns:int HBF :: 
expand	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.cpp	/^vector<HBF::maze_s> HBF::expand(HBF::maze_s state) {$/;"	function	line:45	class:HBF	signature:(HBF::maze_s state)	returns:vector <HBF::maze_s> HBF :: 
reconstruct_path	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.cpp	/^vector< HBF::maze_s> HBF::reconstruct_path(vector< vector< vector<HBF::maze_s> > > came_from, vector<double> start, HBF::maze_s final){$/;"	function	line:76	class:HBF	signature:(vector< vector< vector<HBF::maze_s> > > came_from, vector<double> start, HBF::maze_s final)	returns:vector < HBF::maze_s> HBF :: 
search	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.cpp	/^HBF::maze_path HBF::search(vector< vector<int> > grid, vector<double> start, vector<int> goal) {$/;"	function	line:101	class:HBF	signature:(vector< vector<int> > grid, vector<double> start, vector<int> goal)	returns:HBF :: maze_path HBF :: 
HYBRID_BREADTH_FIRST_H_	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.h	/^#define HYBRID_BREADTH_FIRST_H_$/;"	macro	line:2
HBF	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.h	/^class HBF {$/;"	class	line:12
NUM_THETA_CELLS	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.h	/^	int NUM_THETA_CELLS = 90;$/;"	member	line:15	class:HBF	access:public
SPEED	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.h	/^	double SPEED = 1.45;$/;"	member	line:16	class:HBF	access:public
LENGTH	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.h	/^	double LENGTH = 0.5;$/;"	member	line:17	class:HBF	access:public
maze_s	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.h	/^	struct maze_s {$/;"	struct	line:19	class:HBF	access:public
g	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.h	/^		int g;	\/\/ iteration$/;"	member	line:21	struct:HBF::maze_s	access:public
x	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.h	/^		double x;$/;"	member	line:22	struct:HBF::maze_s	access:public
y	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.h	/^		double y;$/;"	member	line:23	struct:HBF::maze_s	access:public
theta	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.h	/^		double theta;$/;"	member	line:24	struct:HBF::maze_s	access:public
maze_path	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.h	/^	struct maze_path {$/;"	struct	line:27	class:HBF	access:public
closed	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.h	/^		vector< vector< vector<int> > > closed;$/;"	member	line:29	struct:HBF::maze_path	access:public
came_from	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.h	/^		vector< vector< vector<maze_s> > > came_from;$/;"	member	line:30	struct:HBF::maze_path	access:public
HBF	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.h	/^ 	HBF();$/;"	prototype	line:39	class:HBF	access:public	signature:()
~HBF	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.h	/^ 	virtual ~HBF();$/;"	prototype	line:44	class:HBF	access:public	implementation:virtual	signature:()	returns:virtual 
theta_to_stack_number	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.h	/^ 	int theta_to_stack_number(double theta);$/;"	prototype	line:47	class:HBF	access:public	signature:(double theta)	returns:int 
idx	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.h	/^  	int idx(double float_num);$/;"	prototype	line:49	class:HBF	access:public	signature:(double float_num)	returns:int 
expand	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.h	/^  	vector<maze_s> expand(maze_s state);$/;"	prototype	line:51	class:HBF	access:public	signature:(maze_s state)	returns:vector <maze_s> 
search	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.h	/^  	maze_path search(vector< vector<int> > grid, vector<double> start, vector<int> goal);$/;"	prototype	line:53	class:HBF	access:public	signature:(vector< vector<int> > grid, vector<double> start, vector<int> goal)	returns:maze_path 
reconstruct_path	C:\GitHub\HybridAStar\HybridAStar\hybrid_breadth_first.h	/^  	vector<maze_s> reconstruct_path(vector< vector< vector<maze_s> > > came_from, vector<double> start, HBF::maze_s final);$/;"	prototype	line:55	class:HBF	access:public	signature:(vector< vector< vector<maze_s> > > came_from, vector<double> start, HBF::maze_s final)	returns:vector <maze_s> 
